[{"content":"","permalink":"https://retoodermatt.com/contact/","summary":"","title":"Contact"},{"content":"Nur meine persönliche Seite.\n","permalink":"https://retoodermatt.com/about.de/","summary":"Nur meine persönliche Seite.","title":"My 1st post"},{"content":"Hugo utilise l\u0026rsquo;excellente librairie go html/template pour son moteur de modèles. c\u0026rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c\u0026rsquo;est juste ce qu\u0026rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d\u0026rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.\nCe document est une introduction sur l\u0026rsquo;utilisation de Go templates. La documentation go fourni plus de détails.\nIntroduction aux modèles Go Go templates fournit un langage de modèles très simple. Il adhère à la conviction que les modèles ou les vues doivent avoir une logique des plus élémentaires. L\u0026rsquo;une des conséquences de cette simplicité est que les modèles seront plus rapides a être analysés.\nUne caractéristique unique de Go templates est qu\u0026rsquo;il est conscient du contenu. Les variables et le contenu va être nettoyé suivant le contexte d\u0026rsquo;utilisation. Plus de détails sont disponibles dans la documentation go.\nSyntaxe basique Les modèles en langage Go sont des fichiers HTML avec l\u0026rsquo;ajout de variables et fonctions.\nLes variables Go et les fonctions sont accessibles avec {{ }}\nAccès à une variable prédéfinie \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Les paramètres sont séparés par des espaces\nAppel de la fonction add avec 1 et 2 en argument**\n{{ add 1 2 }}\r Les méthodes et les champs sont accessibles par un point\nAccès au paramètre de la page \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Les parenthèses peuvent être utilisées pour grouper des éléments ensemble\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\rVariables Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à chaque modèle est passé soit une page, soit une structure de nœud, suivant quel type de page vous rendez. Plus de détails sont disponibles sur la page des variables.\nUne variable est accessible par son nom.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Les variables peuvent également être définies et appelées.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions Go templace est livré avec quelques fonctions qui fournissent des fonctionnalités basiques. Le système de Go template fourni également un mécanisme permettant aux applications d\u0026rsquo;étendre les fonctions disponible. Les fonctions de modèle Hugo fourni quelques fonctionnalités supplémentaires que nous espérons qu\u0026rsquo;elles seront utiles pour vos sites web. Les functions sont appelées en utilisant leur nom suivi par les paramètres requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être ajoutées sans recompiler Hugo.\nExemple:\n{{ add 1 2 }}\r Inclusions Lorsque vous incluez un autre modèle, vous devez y passer les données qu\u0026rsquo;il sera en mesure d\u0026rsquo;accèder. Pour passer le contexte actuel, pensez à ajouter un point. La localisation du modèle sera toujours à partir du répertoire /layout/ dans Hugo.\nExemple:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logique Go templates fourni les itérations et la logique conditionnèle des plus basique.\nItération Comme en go, les modèles go utilisent fortement range pour itérer dans une map, un array ou un slice. Les exemples suivant montre différentes façons d\u0026rsquo;utiliser range\nExemple 1: En utilisant le context\n{{ range array }}\r{{ . }}\r{{ end }}\r Exemple 2: En déclarant un nom de variable\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditions If, else, with, or, \u0026amp;, and fournissent la base pour la logique conditionnelle avec Go templates. Comme range, chaque déclaration est fermé avec end.\nGo templates considère les valeurs suivante comme false :\n false 0 tout array, slice, map ou chaine d\u0026rsquo;une longueur de zéro  Exemple 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Exemple 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Exemple 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;))\r(isset .Params \u0026quot;attr\u0026quot;)}}\rExemple 4: With\nUne manière alternative d\u0026rsquo;écrire un \u0026ldquo;if\u0026rdquo; et de référencer cette même valeur est d\u0026rsquo;utiliser \u0026ldquo;with\u0026rdquo;. Cela permet de remplacer le contexte . par cet valeur et saute le bloc si la variable est absente.\nLe premier exemple peut être simplifié à ceci :\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Exemple 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes L\u0026rsquo;un des composants le plus puissant de Go templates est la capacité d\u0026rsquo;empiler les action l\u0026rsquo;une après l\u0026rsquo;autre. Cela est fait en utilisant les pipes. Empruntés aux pipes unix, le concept est simple. Chaque sortie de pipeline devient l\u0026rsquo;entrée du pipe suivant.\nÀ cause de la syntaxe très simple de Go templates, le pipe est essentiel pour être capable d\u0026rsquo;enchainer les appels de fonctions. Une limitation des pipes est qu\u0026rsquo;il ne peuvent fonctionner seulement avec une seule valeur et cette valeur devient le dernier paramètre du prochain pipeline.\nQuelques exemples simple devrait vous aider à comprendre comment utiliser les pipes.\nExemple 1 :\n{{ if eq 1 1 }} Same {{ end }}\r est identique à\n{{ eq 1 1 | if }} Same {{ end }}\r Il semble étrange de placer le if à la fin, mais il fournit une bonne illustration de la façon d\u0026rsquo;utiliser les tuyaux.\nExemple 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Accès au paramètre de page nommé \u0026ldquo;disqus_url\u0026rdquo; et échappement du HTML\nExemple 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;))\r(isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\rPeut être réécrit en\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; |\ror isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\rContexte (alias. le point) Le concept le plus facilement négligé pour comprendre les modèles go est que {{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de votre modèle, ce sera l\u0026rsquo;ensemble des données mis à votre disposition. Dans une itération, ce sera la valeur de l\u0026rsquo;élément actuel. Enfin, dans une boucle, le contexte change. . ne fera plus référence aux données disponibles dans la page entière. Si vous avez besoin y d\u0026rsquo;accèder depuis l\u0026rsquo;intérieur d\u0026rsquo;une boucle, il est judicieux d\u0026rsquo;y définir comme variable au lieu de dépendre du contexte.\nExemple:\n{{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;\r{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\rNotez que, une fois que nous sommes entrés dans la boucle, la valeur de {{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin d\u0026rsquo;y avoir accès dans la boucle.\nLes Paramètres d\u0026rsquo;Hugo Hugo fournit l\u0026rsquo;option de passer des valeurs au modèle depuis la configuration du site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir n\u0026rsquo;importe quelle valeur de n\u0026rsquo;importe quel type (supporté par votre section liminaire / format de configuration) et les utiliser comme vous le souhaitez dans votre modèle.\nUtiliser les paramètres de contenu (page) Dans chaque partie du contenu, vous pouvez fournir des variables pour être utilisées par le modèle. Cela se passe dans la section liminaire.\nUn exemple de cela est utilisé par ce site de documentation. La plupart des pages bénéficient de la présentation de la table des matières. Quelques fois, la table des matières n\u0026rsquo;a pas beaucoup de sens. Nous avons défini une variable dans notre section liminaire de quelques pages pour désactiver la table des matières.\nCeci est un exemple de section liminaire :\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rCeci est le code correspondant dans le modèle :\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Utiliser les paramètres de site (config) Dans votre configuration de plus haut niveau (ex config.yaml), vous pouvez définir des paramètres de site, dont les valeurs vous seront accessibles.\nPour les instances, vous pourriez délarer :\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Avec un pied de page, vous devriez déclarer un \u0026lt;footer\u0026gt; qui est affiché seulement si le paramètre CopyrightHTML est déclaré, et si il l\u0026rsquo;est, vous devriez le déclarer comme HTML-safe, afin d\u0026rsquo;éviter d\u0026rsquo;échapper les entités HTML. Cela vous permettra de le modifier facilement dans votre configuration au lieu de le chercher dans votre modèle.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rUne alternative au \u0026ldquo;if\u0026rdquo; et d\u0026rsquo;appeler la même valeur est d\u0026rsquo;utiliser \u0026ldquo;with\u0026rdquo;. Cela modifiera le contexte et passera le bloc si la variable est absente :\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rEnfin, si vous souhaitez extraire des \u0026ldquo;constantes magiques\u0026rdquo; de vos mises en page, vous pouvez le faire comme dans l\u0026rsquo;exemple suivant :\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r","permalink":"https://retoodermatt.com/posts/introduction-to-hugo/","summary":"Hugo utilise l\u0026rsquo;excellente librairie go html/template pour son moteur de modèles. c\u0026rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c\u0026rsquo;est juste ce qu\u0026rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d\u0026rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.\nCe document est une introduction sur l\u0026rsquo;utilisation de Go templates.","title":"Introduction to Hugo"},{"content":"Hugo utilise l\u0026rsquo;excellente librairie go html/template pour son moteur de modèles. c\u0026rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c\u0026rsquo;est juste ce qu\u0026rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d\u0026rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.\nCe document est une introduction sur l\u0026rsquo;utilisation de Go templates. La documentation go fourni plus de détails.\nIntroduction aux modèles Go Go templates fournit un langage de modèles très simple. Il adhère à la conviction que les modèles ou les vues doivent avoir une logique des plus élémentaires. L\u0026rsquo;une des conséquences de cette simplicité est que les modèles seront plus rapides a être analysés.\nUne caractéristique unique de Go templates est qu\u0026rsquo;il est conscient du contenu. Les variables et le contenu va être nettoyé suivant le contexte d\u0026rsquo;utilisation. Plus de détails sont disponibles dans la documentation go.\nSyntaxe basique Les modèles en langage Go sont des fichiers HTML avec l\u0026rsquo;ajout de variables et fonctions.\nLes variables Go et les fonctions sont accessibles avec {{ }}\nAccès à une variable prédéfinie \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Les paramètres sont séparés par des espaces\nAppel de la fonction add avec 1 et 2 en argument**\n{{ add 1 2 }}\r Les méthodes et les champs sont accessibles par un point\nAccès au paramètre de la page \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Les parenthèses peuvent être utilisées pour grouper des éléments ensemble\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\rVariables Chaque modèle go a une structure (objet) mis à sa disposition. Avec Hugo, à chaque modèle est passé soit une page, soit une structure de nœud, suivant quel type de page vous rendez. Plus de détails sont disponibles sur la page des variables.\nUne variable est accessible par son nom.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Les variables peuvent également être définies et appelées.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions Go templace est livré avec quelques fonctions qui fournissent des fonctionnalités basiques. Le système de Go template fourni également un mécanisme permettant aux applications d\u0026rsquo;étendre les fonctions disponible. Les fonctions de modèle Hugo fourni quelques fonctionnalités supplémentaires que nous espérons qu\u0026rsquo;elles seront utiles pour vos sites web. Les functions sont appelées en utilisant leur nom suivi par les paramètres requis séparés par des espaces. Des fonctions de modèles ne peuvent pas être ajoutées sans recompiler Hugo.\nExemple:\n{{ add 1 2 }}\r Inclusions Lorsque vous incluez un autre modèle, vous devez y passer les données qu\u0026rsquo;il sera en mesure d\u0026rsquo;accèder. Pour passer le contexte actuel, pensez à ajouter un point. La localisation du modèle sera toujours à partir du répertoire /layout/ dans Hugo.\nExemple:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logique Go templates fourni les itérations et la logique conditionnèle des plus basique.\nItération Comme en go, les modèles go utilisent fortement range pour itérer dans une map, un array ou un slice. Les exemples suivant montre différentes façons d\u0026rsquo;utiliser range\nExemple 1: En utilisant le context\n{{ range array }}\r{{ . }}\r{{ end }}\r Exemple 2: En déclarant un nom de variable\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Exemple 2: En déclarant un nom de varialbe pour la clé et la valeur\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditions If, else, with, or, \u0026amp;, and fournissent la base pour la logique conditionnelle avec Go templates. Comme range, chaque déclaration est fermé avec end.\nGo templates considère les valeurs suivante comme false :\n false 0 tout array, slice, map ou chaine d\u0026rsquo;une longueur de zéro  Exemple 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Exemple 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Exemple 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;))\r(isset .Params \u0026quot;attr\u0026quot;)}}\rExemple 4: With\nUne manière alternative d\u0026rsquo;écrire un \u0026ldquo;if\u0026rdquo; et de référencer cette même valeur est d\u0026rsquo;utiliser \u0026ldquo;with\u0026rdquo;. Cela permet de remplacer le contexte . par cet valeur et saute le bloc si la variable est absente.\nLe premier exemple peut être simplifié à ceci :\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Exemple 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes L\u0026rsquo;un des composants le plus puissant de Go templates est la capacité d\u0026rsquo;empiler les action l\u0026rsquo;une après l\u0026rsquo;autre. Cela est fait en utilisant les pipes. Empruntés aux pipes unix, le concept est simple. Chaque sortie de pipeline devient l\u0026rsquo;entrée du pipe suivant.\nÀ cause de la syntaxe très simple de Go templates, le pipe est essentiel pour être capable d\u0026rsquo;enchainer les appels de fonctions. Une limitation des pipes est qu\u0026rsquo;il ne peuvent fonctionner seulement avec une seule valeur et cette valeur devient le dernier paramètre du prochain pipeline.\nQuelques exemples simple devrait vous aider à comprendre comment utiliser les pipes.\nExemple 1 :\n{{ if eq 1 1 }} Same {{ end }}\r est identique à\n{{ eq 1 1 | if }} Same {{ end }}\r Il semble étrange de placer le if à la fin, mais il fournit une bonne illustration de la façon d\u0026rsquo;utiliser les tuyaux.\nExemple 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Accès au paramètre de page nommé \u0026ldquo;disqus_url\u0026rdquo; et échappement du HTML\nExemple 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;))\r(isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\rPeut être réécrit en\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; |\ror isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\rContexte (alias. le point) Le concept le plus facilement négligé pour comprendre les modèles go est que {{ . }} fait toujours référence au contexte actuel. Dans le plus haut niveau de votre modèle, ce sera l\u0026rsquo;ensemble des données mis à votre disposition. Dans une itération, ce sera la valeur de l\u0026rsquo;élément actuel. Enfin, dans une boucle, le contexte change. . ne fera plus référence aux données disponibles dans la page entière. Si vous avez besoin y d\u0026rsquo;accèder depuis l\u0026rsquo;intérieur d\u0026rsquo;une boucle, il est judicieux d\u0026rsquo;y définir comme variable au lieu de dépendre du contexte.\nExemple:\n{{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;\r{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\rNotez que, une fois que nous sommes entrés dans la boucle, la valeur de {{ . }} a changée. Nous avons défini une variable en dehors de la boucle, afin d\u0026rsquo;y avoir accès dans la boucle.\nLes Paramètres d\u0026rsquo;Hugo Hugo fournit l\u0026rsquo;option de passer des valeurs au modèle depuis la configuration du site, ou depuis les métadonnées de chaque partie du contenu. Vous pouvez définir n\u0026rsquo;importe quelle valeur de n\u0026rsquo;importe quel type (supporté par votre section liminaire / format de configuration) et les utiliser comme vous le souhaitez dans votre modèle.\nUtiliser les paramètres de contenu (page) Dans chaque partie du contenu, vous pouvez fournir des variables pour être utilisées par le modèle. Cela se passe dans la section liminaire.\nUn exemple de cela est utilisé par ce site de documentation. La plupart des pages bénéficient de la présentation de la table des matières. Quelques fois, la table des matières n\u0026rsquo;a pas beaucoup de sens. Nous avons défini une variable dans notre section liminaire de quelques pages pour désactiver la table des matières.\nCeci est un exemple de section liminaire :\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rCeci est le code correspondant dans le modèle :\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Utiliser les paramètres de site (config) Dans votre configuration de plus haut niveau (ex config.yaml), vous pouvez définir des paramètres de site, dont les valeurs vous seront accessibles.\nPour les instances, vous pourriez délarer :\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Avec un pied de page, vous devriez déclarer un \u0026lt;footer\u0026gt; qui est affiché seulement si le paramètre CopyrightHTML est déclaré, et si il l\u0026rsquo;est, vous devriez le déclarer comme HTML-safe, afin d\u0026rsquo;éviter d\u0026rsquo;échapper les entités HTML. Cela vous permettra de le modifier facilement dans votre configuration au lieu de le chercher dans votre modèle.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rUne alternative au \u0026ldquo;if\u0026rdquo; et d\u0026rsquo;appeler la même valeur est d\u0026rsquo;utiliser \u0026ldquo;with\u0026rdquo;. Cela modifiera le contexte et passera le bloc si la variable est absente :\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rEnfin, si vous souhaitez extraire des \u0026ldquo;constantes magiques\u0026rdquo; de vos mises en page, vous pouvez le faire comme dans l\u0026rsquo;exemple suivant :\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r","permalink":"https://retoodermatt.com/posts/goisforlovers.de/","summary":"Hugo utilise l\u0026rsquo;excellente librairie go html/template pour son moteur de modèles. c\u0026rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c\u0026rsquo;est juste ce qu\u0026rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d\u0026rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.\nCe document est une introduction sur l\u0026rsquo;utilisation de Go templates.","title":"Einführung zu Hugo"},{"content":"Hi, just a first post.\n","permalink":"https://retoodermatt.com/posts/first-post/","summary":"Hi, just a first post.","title":"First Post"},{"content":"","permalink":"https://retoodermatt.com/archive/","summary":"archive","title":"Archive"},{"content":"","permalink":"https://retoodermatt.com/search/","summary":"search","title":"Search"}]